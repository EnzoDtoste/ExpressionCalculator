@page "/"
@using ExpressionCalculator
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Mvc.Filters
@using Microsoft.AspNetCore.Mvc.ModelBinding.Validation

<PageTitle>Index</PageTitle>

<h1 style="text-align: center">Derivadas Parciales</h1>

<div style="display: flex; justify-content:center;">
    <div style="display:inline-flex;">
        <input class="search" @bind="ExpressionValue" @bind:event="oninput" placeholder="Introduzca su expresion" @onkeyup="DeterminateVariables">

        @if (ExpressionValue != "")
        {
            <button class="btn-eliminate" @onclick="() =>{ExpressionValue = s; ExpressionDerivate = s;ExpressionTaylor = s;ExpressionIntegral = s; _expression=false;}">⨯</button>
        }
        else
        {
            <button class="btn-eliminate"></button>
        }

        <button class="btn-search" @onclick="() => { _expression=true;}">df</button>

    </div>

</div>

@if (_expression)
{
    <div style="display: flex; justify-content: center">
        <div style="display: flex; justify-content: center;">
            <button class="Derivate1" @onclick="Derivate" >Derivar respecto a :</button>
            <EditForm Model="Variables">
                <InputSelect @bind-Value="VariableToDerivate" class="InputSelect">
                    @foreach (var item in Variables)
                    {
                        <option value="@item.Item1">@item.Item1</option>
                    }
                </InputSelect>
            </EditForm>
        </div>
        <div style="width: 30px;"></div>
        <div style="display: flex; justify-content: center;">
            <button class="Derivate1" @onclick="Taylor" >Aprox por Taylor n =</button>
            <input type="number" @bind ="cant" class="Cant"/>
            <button class="Derivate1R" @onclick="()=>{_selectVector = true;}">Seleccionar Vector</button>
            
        </div>
        @if(Variables.Count == 1)
        {
            <div style="width: 30px;"></div>
        <div style="display: flex; justify-content: center;">
            <button class="Derivate2" @onclick="Integrate">Integrar de</button>
            <input class="A" type=number @bind="a"/>
            <div class="A"> a </div>
            <input  class="B" type=number @bind="b"/>
        </div>
        }
    </div>
}

<br/>

@if (_selectVector)
{
    <div style="display: flex; justify-content: center">
        <div>
            <label>Seleccione el vector centro</label>
        </div>
    </div>

    <br/>

    <div style="display: flex; justify-content: center">
        @foreach(var item in Variables)
        {
            <label style="width: 30px; height: 30px;">@item.Item1</label>
            <input type="number" @bind="radio[item.Item2]" style="width: 50px; height: 30px;"/>
            <div style="width: 20px;"></div>
        }
    </div>

    <br/>
    <br/>

    <div style="display: flex; justify-content: center">
        <div>
            <label>Seleccione el vector a evaluar</label>
        </div>
    </div>

    <br/>

    <div style="display: flex; justify-content: center">
        @foreach(var item in Variables)
        {
            <label style="width: 30px; height: 30px;">@item.Item1</label>
            <input type="number" @bind="aprox[item.Item2]" style="width: 50px; height: 30px;"/>
            <div style="width: 20px;"></div>
        }
        
    </div>
}

<br/>

@if (ExpressionDerivate != "")
{
    <div style="display: flex; justify-content: center;">
        <h5>Derivada</h5>
    </div>
}

<div style="display: flex; justify-content: center;">
    <label>@ExpressionDerivate</label>
    <br/>
</div>

@if (ExpressionTaylor != "")
{
    <div style="display: flex; justify-content: center;">
        <h5>Taylor</h5>
    </div>
}

<div style="display: flex; justify-content: center;">
    <label>@ExpressionTaylorN</label>
    <br/>
</div>

<div style="display: flex; justify-content: center;">
    <label>@ExpressionTaylor</label>
    <br/>
</div>

<div style="display: flex; justify-content: center;">
    <label>@ExpressionTaylorTotal</label>
    <br/>
</div>

@if (ExpressionIntegral != "")
{
    <div style="display: flex; justify-content: center;">
        <h5>Integral</h5>
    </div>
}

<div style="display: flex; justify-content: center;">
    <label>@ExpressionIntegral</label>
    <br/>
</div>

@code
{
    private string ExpressionDerivate { get; set; } = "";

    private string ExpressionTaylorN { get; set; } = "";
    private string ExpressionTaylor { get; set; } = "";
    private string ExpressionTaylorTotal { get; set; } = "";

    private string ExpressionIntegral { get; set; } = "";

    private bool _expression = false;

    private int cant=1;

    private bool _selectVector;

    private double a=0;

    private double b=1;

    private string s = "";

    private double[] aprox = Array.Empty<double>();

    private double[] radio=Array.Empty<double>();

    private string ExpressionValue { get; set; } = "";

    private List<(char,int)> Variables { get; set; } = new List<(char,int)>();

    private char VariableToDerivate { get; set; } = '0';

    private void Derivate()
    {
        try
        {
            Expression func = Expression.CreateExpression(ExpressionValue, Gui.operators, Gui.less_priority);
            Expression expression = func.Derivate(VariableToDerivate).Evaluate(new Dictionary<char, double>());
            ExpressionDerivate = expression.ToString(Gui.less_priority);

        }
        catch
        {
            ExpressionDerivate="Su expresion es incorrecta";
        }
    }

    private void Integrate()
    {
        try
        {
            ExpressionIntegral = "";
            Expression func = Expression.CreateExpression(ExpressionValue, Gui.operators, Gui.less_priority);
            double answer = IntegralDefinida.Integra(func, a, b,Variables);
            Console.WriteLine(answer);
            ExpressionIntegral = answer.ToString();
        }
        catch
        {
            ExpressionIntegral="Su expresion es incorrecta";
        }
    }


    private void DeterminateVariables(KeyboardEventArgs e)
    {
        if(e.Code=="Enter")
        {
             _expression=true;
        }
        Variables = Gui.DeterminateVariables(ExpressionValue);
        aprox = new double[Variables.Count];
        radio =new double[Variables.Count];
        
        ExpressionDerivate = "";
        ExpressionTaylor = "";
        ExpressionTaylorN = "";
        ExpressionTaylorTotal = "";
        ExpressionIntegral = "";

    }

    private void Taylor()
    {
        try
        {
            _selectVector = false;
            Expression func = Expression.CreateExpression(ExpressionValue, Gui.operators, Gui.less_priority);

            Taylor result = new Taylor(func,radio);

            double[] n = aprox;

            string total = result.Evaluate(cant, n).ToString(Gui.less_priority);
            IEnumerable<Expression> nsn = result.N_Terms(cant);
            IEnumerable<Expression> sum = result.N_Terms(cant,n);

            ExpressionTaylorN = nsn.First().ToString(Gui.less_priority);

            foreach (var exp in nsn.Skip(1))
            {
                ExpressionTaylorN += " + " + exp.ToString(Gui.less_priority);
            }

            ExpressionTaylor = sum.First().ToString(Gui.less_priority);

            foreach (var exp in sum.Skip(1))
            {
                ExpressionTaylor += " + " + exp.ToString(Gui.less_priority);
            }

            ExpressionTaylorTotal = total;
        }
        catch
        {
            ExpressionTaylor="Su expresion es incorrecta";
            ExpressionTaylorN = "";
            ExpressionTaylorTotal = "";
        }

    }

    private string Print(List<double> x)
    {
        return String.Join(",", x);
    }

}